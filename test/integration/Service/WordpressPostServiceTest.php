<?php


namespace Nico1509\Facebookblog\Service;

// Mock, um Test stabil zu halten
function download_url( $url, $timeout = 300, $signature_verification = false ) {
    $mockImagePath = __DIR__ . '/../Fixture/test-logo.png';
    $tempDir = sys_get_temp_dir() . '/facebookblog-integration-wppost';
    exec("cp -p '$mockImagePath' '$tempDir'");
    return $tempDir . '/' . basename($mockImagePath);
}

namespace Nico1509\Facebookblog\Test\Integration\Service;

use DateTime;
use Nico1509\Facebookblog\Model\FacebookPost;
use Nico1509\Facebookblog\Model\Log;
use Nico1509\Facebookblog\Service\WordpressPostService;
use PHPUnit\Framework\TestCase;
use WP_Post;

class WordpressPostServiceTest extends TestCase {

    /**
     * @var WordpressPostService
     */
    private WordpressPostService $wordpressPostService;

    private string $tempDir;

    protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->tempDir = sys_get_temp_dir() . '/facebookblog-integration-wppost';
        $log = new Log($this->tempDir);
        $this->wordpressPostService = new WordpressPostService($log);

        mkdir($this->tempDir);
    }

    protected function tearDown(): void {
        parent::tearDown(); // TODO: Change the autogenerated stub
        exec("rm $this->tempDir -rf");
    }

    public function testCreateBlogPost(): void
    {
        $facebookPost = new FacebookPost(
            'Some Facebook Post',
            '12345_53242134',
            new DateTime( '2020-08-01 00:00:00' ),
            'https://some-url.dev/test-logo.png'
        );

        $id = $this->wordpressPostService->createBlogPost($facebookPost);
        $createdPost = get_post($id);

        self::assertInstanceOf( WP_Post::class, $createdPost);
        self::assertSame('01.08.2020', $createdPost->post_title);
        self::assertSame('Some Facebook Post', $createdPost->post_content);
        self::assertSame('2020-08-01 00:00:00', $createdPost->post_date);

        $facebookIdMeta = get_post_meta($createdPost->ID, '_facebook-blog_id');
        self::assertSame(1, count($facebookIdMeta));
        self::assertSame($facebookPost->getId(), $facebookIdMeta[0]);
    }

}
